@page "/lobby"
@using Microsoft.AspNetCore.SignalR.Client
@using Newtonsoft.Json
@using Blazorball.Data
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<section class="lobby-header">
    <h2>blazorball.xyz</h2>
    <h1>@RoomCode</h1>
    <button class="button g-red" @onclick="Start">Start Game</button>
</section>
<hr />
<ul id="userList">
    @for (int i = 0; i <= _teamCount; i++)
    {
        <li>
            <span><b>Team @i</b></span>
            @foreach (var user in _users.Where(u => u.Value == i))
            {
                <span>@user.Key</span>
            }
        </li>
    }
</ul>

@code {
    private HubConnection _hubConnection;
    private int _teamCount = 0;
    private Dictionary<string, int> _users = new Dictionary<string, int>();
    private int RoomCode;

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chatHub"))
            .Build();

        _hubConnection.On<int>(Messages.SetRoomID, (roomCode) =>
        {
            RoomCode = roomCode;
            StateHasChanged();

            // Add JS Interop to handle disconnections
            JSRuntime.InvokeAsync<object>("createref", DotNetObjectReference.Create(this));
        });

        _hubConnection.On<int, string>(Messages.UpdateUsers, (teamCount, users) =>
        {
            _teamCount = teamCount;
            _users = JsonConvert.DeserializeObject<Dictionary<string, int>>(users);
            StateHasChanged();
        });

        await _hubConnection.StartAsync();

        // Register as host and get room code
        await _hubConnection.SendAsync(Messages.Register);
    }

    Task Start() =>
        _hubConnection.SendAsync("StartGame");

    public bool IsConnected =>
        _hubConnection.State == HubConnectionState.Connected;

    [JSInvokable]
    public async Task Disconnect() =>
        await _hubConnection.StopAsync();
}