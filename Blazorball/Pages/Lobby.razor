@page "/lobby"
@using Microsoft.AspNetCore.SignalR.Client
@using Newtonsoft.Json
@using Blazorball.Data
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<section class="@LobbyCSS">
    <section class="lobby-header">
        <h2>blazorball.xyz</h2>
        <h1>@RoomCode</h1>
        <button class="button g-red" @onclick="Start">Start Game</button>
    </section>
    <hr />
    <ul id="userList">
        @for (int i = 1; i <= _teamCount; i++)
        {
            <li>
                <span><b>Team @i</b></span>
                @{ IEnumerable<Player> players = _users.Where(u => u.Team == i); }
                @if (players.Count() == 0)
                { <span>No players!</span> }

                @foreach (Player user in players)
                {
                    <span>@user.Username</span>
                }
            </li>
        }
    </ul>
</section>
<section class="game @GameCSS">
    <div class="game-info">
        <h1 class="score"><span class="c-red">@OrangeScore</span> - <span class="c-blue">@BlueScore</span></h1>
        <h2 id="timer" class="timer">3:00</h2>
    </div>
    <canvas id="gameCanvas"></canvas>
    <div class="text-overlay">
        <h1 id="overlayText">3</h1>
        <div id="gameEndSummary">
            <h1>Game Over!</h1>
            <h2 id="finalScore"><span class="c-red">@OrangeScore</span> - <span class="c-blue">@BlueScore</span></h2>
            <section class="teams">
                @for (int i = 1; i <= _teamCount; i++)
                {
                <ul>
                    <li><span><b>Team @i</b></span></li>
                    @{ List<Player> players = _users.Where(u => u.Team == i).ToList(); }
                    @if (players.Count() == 0)
                    { <li><span>No players!</span></li> }

                    @foreach (Player user in players)
                    {
                        <li><span>(@Common.PolygonNames[players.IndexOf(user) + 3]) @user.Username</span></li>
                    }
                </ul>
                }
            </section>
        </div>
    </div>
</section>

@code {
    private HubConnection _hubConnection;
    private int _teamCount = 0;
    private List<Player> _users = new List<Player>();
    private int RoomCode;

    private string LobbyCSS;
    private string GameCSS = "d-none";

    int OrangeScore = 0;
    int BlueScore = 0;

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chatHub"))
            .Build();

        _hubConnection.On<int, int>(Messages.SetRoomID, (roomCode, defaultTeamCount) =>
        {
            RoomCode = roomCode;
            _teamCount = defaultTeamCount;
            StateHasChanged();

            // Add JS Interop
            JSRuntime.InvokeAsync<object>("createref", DotNetObjectReference.Create(this));
        });

        _hubConnection.On<int, string>(Messages.UpdateUsers, (teamCount, users) =>
        {
            _teamCount = teamCount;
            _users = JsonConvert.DeserializeObject<List<Player>>(users);
            StateHasChanged();
        });

        _hubConnection.On(Messages.StartGame, () =>
        {
            LobbyCSS = "d-none";
            GameCSS = "";

            int teamACount = _users.Where(p => p.Team == 1).Count();
            int teamBCount = _users.Where(p => p.Team == 2).Count();
            JSRuntime.InvokeAsync<object>("gamestart", JsonConvert.SerializeObject(_users), teamACount, teamBCount);
            StateHasChanged();
        });

        _hubConnection.On<int, double, double>(Messages.ApplyVector, (playerID, x, y) => {
            JSRuntime.InvokeAsync<object>("applyplayerforce", playerID, x, y);
        });

        await _hubConnection.StartAsync();

        // Register as host and get room code
        await _hubConnection.SendAsync(Messages.Register);
    }

    Task Start() =>
        _hubConnection.SendAsync(Messages.StartGame);

    [JSInvokable]
    public async Task UpdateScore(int orange, int blue)
    {
        OrangeScore = orange;
        BlueScore = blue;
        StateHasChanged();
        await _hubConnection.SendAsync(Messages.UpdateScore, RoomCode, orange, blue);
    }

    public bool IsConnected =>
        _hubConnection.State == HubConnectionState.Connected;

    [JSInvokable]
    public async Task Disconnect() =>
        await _hubConnection.StopAsync();
}