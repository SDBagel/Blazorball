@page "/client"
@using Microsoft.AspNetCore.SignalR.Client
@using Newtonsoft.Json
@using Blazorball.Data
@inject NavigationManager NavigationManager

<div class="text-center">
    <div class="header">
        <div class="flex-container">
            <img src="/img/blazorball.svg" alt="Blazorball" class="w-100" />
        </div>
        <br />
    </div>

    <div class="@JoinCTACSS">
        <section class="flex-container join-cta @GamePINCSS">
            <input type="number" class="text-input" placeholder="Game PIN" @bind="gamePIN" />
            <button class="button g-red" @onclick="VerifyRoom">Continue</button>
        </section>

        <section class="flex-container join-cta @UserNameCSS">
            <input type="text" class="text-input" placeholder="Your Name" @bind="userName" />
            <button class="button g-red" @onclick="JoinRoom">Join</button>
        </section>

        <span>@Validation</span>
    </div>

    <div class="@TeamSelectorCSS">
        <ul id="userList">
            @for (int i = 0; i <= _teamCount; i++)
            {
                <li>
                    <span class="list-header"><b>Team @i</b><button class="button">Join</button></span>
                    @foreach (var user in _users.Where(u => u.Value == i))
                    {
                        <span>@user.Key</span>
                    }
                </li>
            }
        </ul>
    </div>
</div>

@code {
    string JoinCTACSS;
    string GamePINCSS;
    string UserNameCSS = "d-none";
    string Validation;

    string TeamSelectorCSS = "d-none";
    private int _teamCount = 0;
    private Dictionary<string, int> _users = new Dictionary<string, int>();

    int? gamePIN;
    string userName;

    private HubConnection _hubConnection;

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chatHub"))
            .Build();

        _hubConnection.On<bool>(Messages.VerifyRoom, (validated) =>
        {
            if (!validated) Validation = "Invalid room code!";
            else
            {
                GamePINCSS = "d-none";
                UserNameCSS = "";
            }
            StateHasChanged();
        });

        _hubConnection.On<bool, string>(Messages.VerifyJoin, (validated, message) =>
        {
            if (!validated) Validation = message;
            else
            {
                JoinCTACSS = "d-none";
                TeamSelectorCSS = "";
            }
            StateHasChanged();
        });

        _hubConnection.On<int, string>(Messages.UpdateUsers, (teamCount, users) =>
        {
            _teamCount = teamCount;
            _users = JsonConvert.DeserializeObject<Dictionary<string, int>>(users);
            StateHasChanged();
        });

        await _hubConnection.StartAsync();
    }

    Task VerifyRoom() =>
        _hubConnection.SendAsync(Messages.VerifyRoom, gamePIN);

    Task JoinRoom() =>
        _hubConnection.SendAsync(Messages.JoinRoom, gamePIN, userName);

    public bool IsConnected =>
        _hubConnection.State == HubConnectionState.Connected;
}